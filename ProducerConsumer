package com.sample;



class sharedDataaa {
 int count = 0;
 boolean hasData = false; // Flag to track if data is available

 // Producer method
 synchronized void produce(int value) {
     while (hasData) {
         try {
             wait(); // Wait if data is already produced
         } catch (InterruptedException e) {
             System.out.println(e);
         }
     }
     count = value;
     hasData = true;
     System.out.println("Producer produced: " + count);
     notify(); //  Notify consumer
 }

 //  Consumer method
 synchronized void consume() {
     while (!hasData) {
         try {
             wait(); // Wait if no data is available
         } catch (InterruptedException e) {
             System.out.println(e);
         }
     }
     System.out.println("Consumer consumed: " + count);
     hasData = false;
     notify(); // Notify producer
 }
}

//Producer thread
class producer1 extends Thread {
 sharedDataaa data;

 producer1(sharedDataaa data) {
     this.data = data;
 }

 public void run() {
     for (int i = 0; i < 5; i++) {
         data.produce(i); // Produce data using shared method
         try {
             Thread.sleep(300);
         } catch (Exception e) {
             System.out.println(e);
         }
     }
 }
}

//Consumer thread
class consumer1 extends Thread {
 sharedDataaa data;

 consumer1(sharedDataaa data) {
     this.data = data;
 }

 public void run() {
     for (int i = 0; i < 5; i++) {
         data.consume(); //  Consume data using shared method
         try {
             Thread.sleep(300);
         } catch (Exception e) {
             System.out.println(e);
         }
     }
 }
}

// Main class
    
 


public class Intercommunication {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		 sharedDataaa ans = new sharedDataaa(); //  Shared object
	     producer1 obj1 = new producer1(ans);
	     consumer1 obj2 = new consumer1(ans);
	     obj1.start();
	     obj2.start();

	}

}
Output
Producer produced: 0
Consumer consumed: 0
Producer produced: 1
Consumer consumed: 1
Producer produced: 2
Consumer consumed: 2
Producer produced: 3
Consumer consumed: 3
Producer produced: 4
Consumer consumed: 4
